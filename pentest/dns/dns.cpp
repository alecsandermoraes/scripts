#include <arpa/nameser.h>
#include <netinet/in.h>
#include <iostream> 
#include <resolv.h>
#include <fstream>
#include <cstdlib>
#include <cstring>
#include <string>

int main(int argc, char *argv[]) {
    char *wordlist = nullptr; 
    char *domain = nullptr;

    int opt;
    while ((opt = getopt(argc, argv, "w:d:")) != -1) {
        switch (opt) {
            case 'w':
                wordlist = optarg;
                break;
            case 'd':
                domain = optarg;
                break;
            default:
                std::cerr << "Uso: " << argv[0] << " -w WORDLIST -d DOMAIN" << std::endl;
                exit(EXIT_FAILURE);
        }
    }

    if (!wordlist || !domain) {
        std:cerr << "Forneça os Argumentos Corretamente" << std::endl;
        exit(EXIT_FAILURE);
    }

    res_init();
    std::ifstream wordlist_file(wordlist);
    if (!wordlist_file) {
        perror("Erro ao Abrir a Wordlist");
        exit(EXIT_FAILURE);
    }

    res_state res = new __res_state;
    if (!res) {
        perror("Erro ao Alocar Memória para res_state");
        exit(EXIT_FAILURE);
    }

    res_ninit(res);
    char subdomain[256];

    while (wordlist_file.getline(subdomain, sizeof(subdomain))) {
        subdomain[strcspn(subdomain, "\n")] = 0;
        char sub_target[512];
        snprintf(sub_target, sizeof(sub_target), "%s.%s", subdomain, domain);

        struct hostent *host_entry = gethostbyname(sub_target);
        if (host_entry == nullptr) {
            herror("Erro ao Detectar Subdomínio");
            continue;
        }

        struct in_addr **addr_list = (struct in_addr **) host_entry -> h_addr_list;
        for (int i = 0; addr_list[i] != nullptr; i++) {
            std::cout << sub_target << " -> " << inet_ntoa(*addr_list[i]) << std::endl;
        }
    }

    wordlist_file.close();
    delete res;
    return 0;
}